import java.util.concurrent.Semaphore;
import java.security.SecureRandom;
import java.util.Scanner;

public class juegoPañuelo {

	class jugadores extends Thread {
		int numOrden;
		String identificador;
		int numCogido;
		boolean stop=false;
		
		public jugadores(int numOrden, int numCogido){
			super();
			this.numOrden = numOrden;
			this.identificador = "ALEX"+numOrden;
			this.numCogido=numCogido;
		}
		
		public int getNumOrden() {
			return numOrden;
		}
		
		public void setNumOrden(int numOrden) {
			this.numOrden = numOrden;
		}
		
		public String getIdentificador() {
			return identificador;
		}
		
		public void setIdentificador(String identificador) {
			this.identificador = identificador;
		}
		
		public int getNumCogido() {
			return numCogido;
		}
		
		public void setNumCogido(int numCogido) {
			this.numCogido = numCogido;
		}
		
		public void run() {
			//while(stop==false) {
				cogerPañuelo(this);
			//}
		}
		
		public void parar() {
			stop=true;
		}
	}
	
	Semaphore semaforo;
	
	public juegoPañuelo(int limite) {
		semaforo=new Semaphore(limite);
	}
	
	public void cogerPañuelo(jugadores j) {
		try {
			
			semaforo.acquire();
			Thread.sleep(1000);
			j.setNumCogido(j.getNumCogido()+1);
			System.out.println("Jugador: "+j.getIdentificador()+" recogio el pañuelo a las: "+System.currentTimeMillis()+" "
					+ "numero de veces cogido: "+j.getNumCogido());
			
			
			
			semaforo.release();
			
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	public void juego() {
		Scanner sc=new Scanner(System.in);
		String respuesta="";
		
		jugadores j1=new jugadores(1,0);
		jugadores j2=new jugadores(2,0);
		
		SecureRandom sr = new SecureRandom();
		
		do {
			j1=new jugadores(1,j1.getNumCogido());
			j2=new jugadores(2,j2.getNumCogido());
			
			System.out.println("Pulsa s para comenzar el programa, f para salir");
			respuesta=sc.next();
			
			if(respuesta.equalsIgnoreCase("s")) {
				try {
					
					//Thread.sleep(sr.nextInt(2000));
					
					j1.start();
					j2.start();
				
					Thread.sleep(sr.nextInt(2000));
					
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				
			}
		} while(!respuesta.equalsIgnoreCase("f")&&j1.getNumCogido()!=5&&j2.getNumCogido()!=5);
		
		System.out.println("GAME OVER");
		sc.close();
		
	}
	
	public static void main(String[]args) {
		juegoPañuelo jp=new juegoPañuelo(1);
		jp.juego();
	}
}
